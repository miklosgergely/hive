PREHOOK: query: CREATE TABLE dest1_n124(key INT, value STRING) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@dest1_n124
POSTHOOK: query: CREATE TABLE dest1_n124(key INT, value STRING) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@dest1_n124
PREHOOK: query: EXPLAIN
FROM (
  FROM src
  SELECT TRANSFORM(src.key, src.value, 1+2, 3+4)
         USING 'cat'
  CLUSTER BY key
) tmap
INSERT OVERWRITE TABLE dest1_n124 SELECT tmap.key, regexp_replace(tmap.value,'\t','+') WHERE tmap.key < 100
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@dest1_n124
POSTHOOK: query: EXPLAIN
FROM (
  FROM src
  SELECT TRANSFORM(src.key, src.value, 1+2, 3+4)
         USING 'cat'
  CLUSTER BY key
) tmap
INSERT OVERWRITE TABLE dest1_n124 SELECT tmap.key, regexp_replace(tmap.value,'\t','+') WHERE tmap.key < 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@dest1_n124
Plan not optimized by CBO because the statement has cluster by; uses scripts

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)

Stage-3
  Stats Work{}
    Stage-0
      Move Operator
        table:{"name:":"default.dest1_n124"}
        Stage-2
          Dependency Collection{}
            Stage-1
              Reducer 3
              File Output Operator [FS_15]
                Group By Operator [GBY_13] (rows=1 width=880)
                  Output:["_col0","_col1"],aggregations:["compute_stats(VALUE._col0)","compute_stats(VALUE._col1)"]
                <-Reducer 2 [CUSTOM_SIMPLE_EDGE]
                  File Output Operator [FS_8]
                    table:{"name:":"default.dest1_n124"}
                    Select Operator [SEL_4] (rows=166 width=188)
                      Output:["_col0","_col1"]
                    <-Map 1 [SIMPLE_EDGE]
                      SHUFFLE [RS_3]
                        PartitionCols:_col0
                        Filter Operator [FIL_16] (rows=166 width=186)
                          predicate:(_col0 < 100)
                          Transform Operator [SCR_2] (rows=500 width=186)
                            command:cat
                            Select Operator [SEL_1] (rows=500 width=186)
                              Output:["_col0","_col1","_col2","_col3"]
                              TableScan [TS_0] (rows=500 width=178)
                                default@src,src,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                  PARTITION_ONLY_SHUFFLE [RS_12]
                    Group By Operator [GBY_11] (rows=1 width=864)
                      Output:["_col0","_col1"],aggregations:["compute_stats(key, 'hll')","compute_stats(value, 'hll')"]
                      Select Operator [SEL_10] (rows=166 width=188)
                        Output:["key","value"]
                         Please refer to the previous Select Operator [SEL_4]

PREHOOK: query: FROM (
  FROM src
  SELECT TRANSFORM(src.key, src.value, 1+2, 3+4)
         USING 'cat'
  CLUSTER BY key
) tmap
INSERT OVERWRITE TABLE dest1_n124 SELECT tmap.key, regexp_replace(tmap.value,'\t','+') WHERE tmap.key < 100
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@dest1_n124
POSTHOOK: query: FROM (
  FROM src
  SELECT TRANSFORM(src.key, src.value, 1+2, 3+4)
         USING 'cat'
  CLUSTER BY key
) tmap
INSERT OVERWRITE TABLE dest1_n124 SELECT tmap.key, regexp_replace(tmap.value,'\t','+') WHERE tmap.key < 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@dest1_n124
POSTHOOK: Lineage: dest1_n124.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: dest1_n124.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: SELECT dest1_n124.* FROM dest1_n124
PREHOOK: type: QUERY
PREHOOK: Input: default@dest1_n124
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT dest1_n124.* FROM dest1_n124
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dest1_n124
POSTHOOK: Output: hdfs://### HDFS PATH ###
0	val_0+3+7
0	val_0+3+7
0	val_0+3+7
10	val_10+3+7
11	val_11+3+7
12	val_12+3+7
12	val_12+3+7
15	val_15+3+7
15	val_15+3+7
17	val_17+3+7
18	val_18+3+7
18	val_18+3+7
19	val_19+3+7
2	val_2+3+7
20	val_20+3+7
24	val_24+3+7
24	val_24+3+7
26	val_26+3+7
26	val_26+3+7
27	val_27+3+7
28	val_28+3+7
30	val_30+3+7
33	val_33+3+7
34	val_34+3+7
35	val_35+3+7
35	val_35+3+7
35	val_35+3+7
37	val_37+3+7
37	val_37+3+7
4	val_4+3+7
41	val_41+3+7
42	val_42+3+7
42	val_42+3+7
43	val_43+3+7
44	val_44+3+7
47	val_47+3+7
5	val_5+3+7
5	val_5+3+7
5	val_5+3+7
51	val_51+3+7
51	val_51+3+7
53	val_53+3+7
54	val_54+3+7
57	val_57+3+7
58	val_58+3+7
58	val_58+3+7
64	val_64+3+7
65	val_65+3+7
66	val_66+3+7
67	val_67+3+7
67	val_67+3+7
69	val_69+3+7
70	val_70+3+7
70	val_70+3+7
70	val_70+3+7
72	val_72+3+7
72	val_72+3+7
74	val_74+3+7
76	val_76+3+7
76	val_76+3+7
77	val_77+3+7
78	val_78+3+7
8	val_8+3+7
80	val_80+3+7
82	val_82+3+7
83	val_83+3+7
83	val_83+3+7
84	val_84+3+7
84	val_84+3+7
85	val_85+3+7
86	val_86+3+7
87	val_87+3+7
9	val_9+3+7
90	val_90+3+7
90	val_90+3+7
90	val_90+3+7
92	val_92+3+7
95	val_95+3+7
95	val_95+3+7
96	val_96+3+7
97	val_97+3+7
97	val_97+3+7
98	val_98+3+7
98	val_98+3+7
