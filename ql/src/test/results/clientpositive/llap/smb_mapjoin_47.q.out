PREHOOK: query: CREATE TABLE aux1_n0 (key INT, value INT, col_1 STRING)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@aux1_n0
POSTHOOK: query: CREATE TABLE aux1_n0 (key INT, value INT, col_1 STRING)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@aux1_n0
PREHOOK: query: INSERT INTO aux1_n0 VALUES (NULL, NULL, 'None'), (98, NULL, 'None'),
    (99, 0, 'Alice'), (99, 2, 'Mat'), (100, 1, 'Bob'), (101, 2, 'Car')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@aux1_n0
POSTHOOK: query: INSERT INTO aux1_n0 VALUES (NULL, NULL, 'None'), (98, NULL, 'None'),
    (99, 0, 'Alice'), (99, 2, 'Mat'), (100, 1, 'Bob'), (101, 2, 'Car')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@aux1_n0
POSTHOOK: Lineage: aux1_n0.col_1 SCRIPT []
POSTHOOK: Lineage: aux1_n0.key SCRIPT []
POSTHOOK: Lineage: aux1_n0.value SCRIPT []
PREHOOK: query: CREATE TABLE test1_n8 (key INT, value INT, col_1 STRING) CLUSTERED BY (value) SORTED BY (value) INTO 2 BUCKETS
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test1_n8
POSTHOOK: query: CREATE TABLE test1_n8 (key INT, value INT, col_1 STRING) CLUSTERED BY (value) SORTED BY (value) INTO 2 BUCKETS
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test1_n8
PREHOOK: query: INSERT OVERWRITE TABLE test1_n8
SELECT * FROM aux1_n0
PREHOOK: type: QUERY
PREHOOK: Input: default@aux1_n0
PREHOOK: Output: default@test1_n8
POSTHOOK: query: INSERT OVERWRITE TABLE test1_n8
SELECT * FROM aux1_n0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@aux1_n0
POSTHOOK: Output: default@test1_n8
POSTHOOK: Lineage: test1_n8.col_1 SIMPLE [(aux1_n0)aux1_n0.FieldSchema(name:col_1, type:string, comment:null), ]
POSTHOOK: Lineage: test1_n8.key SIMPLE [(aux1_n0)aux1_n0.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: test1_n8.value SIMPLE [(aux1_n0)aux1_n0.FieldSchema(name:value, type:int, comment:null), ]
PREHOOK: query: CREATE TABLE aux2_n0 (key INT, value INT, col_2 STRING)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@aux2_n0
POSTHOOK: query: CREATE TABLE aux2_n0 (key INT, value INT, col_2 STRING)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@aux2_n0
PREHOOK: query: INSERT INTO aux2_n0 VALUES (102, 2, 'Del'), (103, 2, 'Ema'),
    (104, 3, 'Fli'), (105, NULL, 'None')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@aux2_n0
POSTHOOK: query: INSERT INTO aux2_n0 VALUES (102, 2, 'Del'), (103, 2, 'Ema'),
    (104, 3, 'Fli'), (105, NULL, 'None')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@aux2_n0
POSTHOOK: Lineage: aux2_n0.col_2 SCRIPT []
POSTHOOK: Lineage: aux2_n0.key SCRIPT []
POSTHOOK: Lineage: aux2_n0.value SCRIPT []
PREHOOK: query: CREATE TABLE test2_n5 (key INT, value INT, col_2 STRING) CLUSTERED BY (value) SORTED BY (value) INTO 2 BUCKETS
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test2_n5
POSTHOOK: query: CREATE TABLE test2_n5 (key INT, value INT, col_2 STRING) CLUSTERED BY (value) SORTED BY (value) INTO 2 BUCKETS
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test2_n5
PREHOOK: query: INSERT OVERWRITE TABLE test2_n5
SELECT * FROM aux2_n0
PREHOOK: type: QUERY
PREHOOK: Input: default@aux2_n0
PREHOOK: Output: default@test2_n5
POSTHOOK: query: INSERT OVERWRITE TABLE test2_n5
SELECT * FROM aux2_n0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@aux2_n0
POSTHOOK: Output: default@test2_n5
POSTHOOK: Lineage: test2_n5.col_2 SIMPLE [(aux2_n0)aux2_n0.FieldSchema(name:col_2, type:string, comment:null), ]
POSTHOOK: Lineage: test2_n5.key SIMPLE [(aux2_n0)aux2_n0.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: test2_n5.value SIMPLE [(aux2_n0)aux2_n0.FieldSchema(name:value, type:int, comment:null), ]
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n8 JOIN test2_n5
ON (test1_n8.value=test2_n5.value
  AND test1_n8.key between 100 and 102
  AND test2_n5.key between 100 and 102)
LIMIT 10
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n8
PREHOOK: Input: default@test2_n5
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n8 JOIN test2_n5
ON (test1_n8.value=test2_n5.value
  AND test1_n8.key between 100 and 102
  AND test2_n5.key between 100 and 102)
LIMIT 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n8
POSTHOOK: Input: default@test2_n5
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 1 <- Map 2 (CUSTOM_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n8
                  filterExpr: (value is not null and key BETWEEN 100 AND 102) (type: boolean)
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (value is not null and key BETWEEN 100 AND 102) (type: boolean)
                    Statistics: Num rows: 2 Data size: 192 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: key (type: int), value (type: int), col_1 (type: string)
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 2 Data size: 192 Basic stats: COMPLETE Column stats: COMPLETE
                      Map Join Operator
                        condition map:
                             Inner Join 0 to 1
                        keys:
                          0 _col1 (type: int)
                          1 _col1 (type: int)
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                        input vertices:
                          1 Map 2
                        Statistics: Num rows: 2 Data size: 382 Basic stats: COMPLETE Column stats: COMPLETE
                        Limit
                          Number of rows: 10
                          Statistics: Num rows: 2 Data size: 382 Basic stats: COMPLETE Column stats: COMPLETE
                          File Output Operator
                            compressed: false
                            Statistics: Num rows: 2 Data size: 382 Basic stats: COMPLETE Column stats: COMPLETE
                            table:
                                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 2 
            Map Operator Tree:
                TableScan
                  alias: test2_n5
                  filterExpr: (value is not null and key BETWEEN 100 AND 102) (type: boolean)
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (value is not null and key BETWEEN 100 AND 102) (type: boolean)
                    Statistics: Num rows: 1 Data size: 95 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: key (type: int), value (type: int), col_2 (type: string)
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 1 Data size: 95 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col1 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col1 (type: int)
                        Statistics: Num rows: 1 Data size: 95 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs

  Stage: Stage-0
    Fetch Operator
      limit: 10
      Processor Tree:
        ListSink

PREHOOK: query: SELECT *
FROM test1_n8 JOIN test2_n5
ON (test1_n8.value=test2_n5.value
  AND test1_n8.key between 100 and 102
  AND test2_n5.key between 100 and 102)
LIMIT 10
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n8
PREHOOK: Input: default@test2_n5
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n8 JOIN test2_n5
ON (test1_n8.value=test2_n5.value
  AND test1_n8.key between 100 and 102
  AND test2_n5.key between 100 and 102)
LIMIT 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n8
POSTHOOK: Input: default@test2_n5
#### A masked pattern was here ####
101	2	Car	102	2	Del
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n8 JOIN test2_n5
ON (test1_n8.value=test2_n5.value AND true)
LIMIT 10
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n8
PREHOOK: Input: default@test2_n5
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n8 JOIN test2_n5
ON (test1_n8.value=test2_n5.value AND true)
LIMIT 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n8
POSTHOOK: Input: default@test2_n5
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 1 <- Map 2 (CUSTOM_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n8
                  filterExpr: value is not null (type: boolean)
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: value is not null (type: boolean)
                    Statistics: Num rows: 4 Data size: 384 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: key (type: int), value (type: int), col_1 (type: string)
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 4 Data size: 384 Basic stats: COMPLETE Column stats: COMPLETE
                      Map Join Operator
                        condition map:
                             Inner Join 0 to 1
                        keys:
                          0 _col1 (type: int)
                          1 _col1 (type: int)
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                        input vertices:
                          1 Map 2
                        Statistics: Num rows: 6 Data size: 1146 Basic stats: COMPLETE Column stats: COMPLETE
                        Limit
                          Number of rows: 10
                          Statistics: Num rows: 6 Data size: 1146 Basic stats: COMPLETE Column stats: COMPLETE
                          File Output Operator
                            compressed: false
                            Statistics: Num rows: 6 Data size: 1146 Basic stats: COMPLETE Column stats: COMPLETE
                            table:
                                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 2 
            Map Operator Tree:
                TableScan
                  alias: test2_n5
                  filterExpr: value is not null (type: boolean)
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: value is not null (type: boolean)
                    Statistics: Num rows: 3 Data size: 285 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: key (type: int), value (type: int), col_2 (type: string)
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 3 Data size: 285 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col1 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col1 (type: int)
                        Statistics: Num rows: 3 Data size: 285 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs

  Stage: Stage-0
    Fetch Operator
      limit: 10
      Processor Tree:
        ListSink

PREHOOK: query: SELECT *
FROM test1_n8 JOIN test2_n5
ON (test1_n8.value=test2_n5.value AND true)
LIMIT 10
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n8
PREHOOK: Input: default@test2_n5
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n8 JOIN test2_n5
ON (test1_n8.value=test2_n5.value AND true)
LIMIT 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n8
POSTHOOK: Input: default@test2_n5
#### A masked pattern was here ####
99	2	Mat	103	2	Ema
99	2	Mat	102	2	Del
101	2	Car	103	2	Ema
101	2	Car	102	2	Del
Warning: Map Join MAPJOIN[14][bigTable=?] in task 'Map 1' is a cross product
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n8 JOIN test2_n5
ON (test1_n8.key between 100 and 102
  AND test2_n5.key between 100 and 102
  AND true)
LIMIT 10
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n8
PREHOOK: Input: default@test2_n5
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n8 JOIN test2_n5
ON (test1_n8.key between 100 and 102
  AND test2_n5.key between 100 and 102
  AND true)
LIMIT 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n8
POSTHOOK: Input: default@test2_n5
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 1 <- Map 2 (BROADCAST_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n8
                  filterExpr: key BETWEEN 100 AND 102 (type: boolean)
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: key BETWEEN 100 AND 102 (type: boolean)
                    Statistics: Num rows: 3 Data size: 288 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: key (type: int), value (type: int), col_1 (type: string)
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 3 Data size: 288 Basic stats: COMPLETE Column stats: COMPLETE
                      Map Join Operator
                        condition map:
                             Inner Join 0 to 1
                        keys:
                          0 
                          1 
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                        input vertices:
                          1 Map 2
                        Statistics: Num rows: 3 Data size: 573 Basic stats: COMPLETE Column stats: COMPLETE
                        Limit
                          Number of rows: 10
                          Statistics: Num rows: 3 Data size: 573 Basic stats: COMPLETE Column stats: COMPLETE
                          File Output Operator
                            compressed: false
                            Statistics: Num rows: 3 Data size: 573 Basic stats: COMPLETE Column stats: COMPLETE
                            table:
                                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 2 
            Map Operator Tree:
                TableScan
                  alias: test2_n5
                  filterExpr: key BETWEEN 100 AND 102 (type: boolean)
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: key BETWEEN 100 AND 102 (type: boolean)
                    Statistics: Num rows: 1 Data size: 95 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: key (type: int), value (type: int), col_2 (type: string)
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 1 Data size: 95 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        null sort order: 
                        sort order: 
                        Statistics: Num rows: 1 Data size: 95 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs

  Stage: Stage-0
    Fetch Operator
      limit: 10
      Processor Tree:
        ListSink

Warning: Map Join MAPJOIN[14][bigTable=?] in task 'Map 1' is a cross product
PREHOOK: query: SELECT *
FROM test1_n8 JOIN test2_n5
ON (test1_n8.key between 100 and 102
  AND test2_n5.key between 100 and 102
  AND true)
LIMIT 10
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n8
PREHOOK: Input: default@test2_n5
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n8 JOIN test2_n5
ON (test1_n8.key between 100 and 102
  AND test2_n5.key between 100 and 102
  AND true)
LIMIT 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n8
POSTHOOK: Input: default@test2_n5
#### A masked pattern was here ####
101	2	Car	102	2	Del
100	1	Bob	102	2	Del
Warning: Shuffle Join MERGEJOIN[10][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n8 JOIN test2_n5
ON (test1_n8.value=test2_n5.value
  OR test1_n8.key between 100 and 102
  OR test2_n5.key between 100 and 102)
LIMIT 10
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n8
PREHOOK: Input: default@test2_n5
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n8 JOIN test2_n5
ON (test1_n8.value=test2_n5.value
  OR test1_n8.key between 100 and 102
  OR test2_n5.key between 100 and 102)
LIMIT 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n8
POSTHOOK: Input: default@test2_n5
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (XPROD_EDGE), Map 3 (XPROD_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n8
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string), key BETWEEN 100 AND 102 (type: boolean)
                    outputColumnNames: _col0, _col1, _col2, _col3
                    Statistics: Num rows: 6 Data size: 596 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 6 Data size: 596 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string), _col3 (type: boolean)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: test2_n5
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string), key BETWEEN 100 AND 102 (type: boolean)
                    outputColumnNames: _col0, _col1, _col2, _col3
                    Statistics: Num rows: 4 Data size: 396 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 4 Data size: 396 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string), _col3 (type: boolean)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7
                residual filter predicates: {((_col1 = _col5) or _col3 or _col7)}
                Statistics: Num rows: 24 Data size: 4772 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string), _col4 (type: int), _col5 (type: int), _col6 (type: string)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                  Statistics: Num rows: 24 Data size: 4580 Basic stats: COMPLETE Column stats: COMPLETE
                  Limit
                    Number of rows: 10
                    Statistics: Num rows: 10 Data size: 1910 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 10 Data size: 1910 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 10
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[10][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: SELECT *
FROM test1_n8 JOIN test2_n5
ON (test1_n8.value=test2_n5.value
  OR test1_n8.key between 100 and 102
  OR test2_n5.key between 100 and 102)
LIMIT 10
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n8
PREHOOK: Input: default@test2_n5
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n8 JOIN test2_n5
ON (test1_n8.value=test2_n5.value
  OR test1_n8.key between 100 and 102
  OR test2_n5.key between 100 and 102)
LIMIT 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n8
POSTHOOK: Input: default@test2_n5
#### A masked pattern was here ####
100	1	Bob	104	3	Fli
100	1	Bob	103	2	Ema
100	1	Bob	102	2	Del
100	1	Bob	105	NULL	None
99	0	Alice	102	2	Del
101	2	Car	104	3	Fli
101	2	Car	103	2	Ema
101	2	Car	102	2	Del
101	2	Car	105	NULL	None
99	2	Mat	103	2	Ema
Warning: Shuffle Join MERGEJOIN[10][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n8 JOIN test2_n5
ON (test1_n8.key+test2_n5.key >= 100
  AND test1_n8.key+test2_n5.key <= 102)
LIMIT 10
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n8
PREHOOK: Input: default@test2_n5
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n8 JOIN test2_n5
ON (test1_n8.key+test2_n5.key >= 100
  AND test1_n8.key+test2_n5.key <= 102)
LIMIT 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n8
POSTHOOK: Input: default@test2_n5
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (XPROD_EDGE), Map 3 (XPROD_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n8
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: test2_n5
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                residual filter predicates: {(_col0 + _col3) BETWEEN 100 AND 102}
                Statistics: Num rows: 12 Data size: 2292 Basic stats: COMPLETE Column stats: COMPLETE
                Limit
                  Number of rows: 10
                  Statistics: Num rows: 10 Data size: 1910 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 10 Data size: 1910 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 10
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[10][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: SELECT *
FROM test1_n8 JOIN test2_n5
ON (test1_n8.key+test2_n5.key >= 100
  AND test1_n8.key+test2_n5.key <= 102)
LIMIT 10
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n8
PREHOOK: Input: default@test2_n5
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n8 JOIN test2_n5
ON (test1_n8.key+test2_n5.key >= 100
  AND test1_n8.key+test2_n5.key <= 102)
LIMIT 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n8
POSTHOOK: Input: default@test2_n5
#### A masked pattern was here ####
Warning: Shuffle Join MERGEJOIN[10][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n8 JOIN test2_n5
ON (test1_n8.key+test2_n5.key >= 100
  OR test1_n8.key+test2_n5.key <= 102)
LIMIT 10
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n8
PREHOOK: Input: default@test2_n5
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n8 JOIN test2_n5
ON (test1_n8.key+test2_n5.key >= 100
  OR test1_n8.key+test2_n5.key <= 102)
LIMIT 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n8
POSTHOOK: Input: default@test2_n5
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (XPROD_EDGE), Map 3 (XPROD_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n8
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: test2_n5
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                residual filter predicates: {(((_col0 + _col3) >= 100) or ((_col0 + _col3) <= 102))}
                Statistics: Num rows: 16 Data size: 3056 Basic stats: COMPLETE Column stats: COMPLETE
                Limit
                  Number of rows: 10
                  Statistics: Num rows: 10 Data size: 1910 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 10 Data size: 1910 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 10
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[10][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: SELECT *
FROM test1_n8 JOIN test2_n5
ON (test1_n8.key+test2_n5.key >= 100
  OR test1_n8.key+test2_n5.key <= 102)
LIMIT 10
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n8
PREHOOK: Input: default@test2_n5
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n8 JOIN test2_n5
ON (test1_n8.key+test2_n5.key >= 100
  OR test1_n8.key+test2_n5.key <= 102)
LIMIT 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n8
POSTHOOK: Input: default@test2_n5
#### A masked pattern was here ####
100	1	Bob	104	3	Fli
100	1	Bob	103	2	Ema
100	1	Bob	102	2	Del
100	1	Bob	105	NULL	None
99	0	Alice	104	3	Fli
99	0	Alice	103	2	Ema
99	0	Alice	102	2	Del
99	0	Alice	105	NULL	None
101	2	Car	104	3	Fli
101	2	Car	103	2	Ema
Warning: Shuffle Join MERGEJOIN[10][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: EXPLAIN
SELECT *
FROM test1_n8 JOIN test2_n5
ON ((test1_n8.key,test2_n5.key) IN ((100,100),(101,101),(102,102)))
LIMIT 10
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n8
PREHOOK: Input: default@test2_n5
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1_n8 JOIN test2_n5
ON ((test1_n8.key,test2_n5.key) IN ((100,100),(101,101),(102,102)))
LIMIT 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n8
POSTHOOK: Input: default@test2_n5
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (XPROD_EDGE), Map 3 (XPROD_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test1_n8
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: test2_n5
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                residual filter predicates: {(struct(_col0,_col3)) IN (const struct(100,100), const struct(101,101), const struct(102,102))}
                Statistics: Num rows: 5 Data size: 955 Basic stats: COMPLETE Column stats: COMPLETE
                Limit
                  Number of rows: 10
                  Statistics: Num rows: 5 Data size: 955 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 5 Data size: 955 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 10
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[10][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: SELECT *
FROM test1_n8 JOIN test2_n5
ON ((test1_n8.key,test2_n5.key) IN ((100,100),(101,101),(102,102)))
LIMIT 10
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n8
PREHOOK: Input: default@test2_n5
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1_n8 JOIN test2_n5
ON ((test1_n8.key,test2_n5.key) IN ((100,100),(101,101),(102,102)))
LIMIT 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n8
POSTHOOK: Input: default@test2_n5
#### A masked pattern was here ####
Warning: Shuffle Join MERGEJOIN[24][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: EXPLAIN
SELECT *
FROM test2_n5
JOIN test1_n8 a ON (a.key+test2_n5.key >= 100)
LEFT OUTER JOIN test1_n8 b ON (b.value = test2_n5.value)
LIMIT 10
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n8
PREHOOK: Input: default@test2_n5
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM test2_n5
JOIN test1_n8 a ON (a.key+test2_n5.key >= 100)
LEFT OUTER JOIN test1_n8 b ON (b.value = test2_n5.value)
LIMIT 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n8
POSTHOOK: Input: default@test2_n5
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 1 <- Map 3 (CUSTOM_EDGE)
        Reducer 2 <- Map 1 (XPROD_EDGE), Map 3 (XPROD_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test2_n5
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                    Map Join Operator
                      condition map:
                           Left Outer Join 0 to 1
                      keys:
                        0 _col1 (type: int)
                        1 _col1 (type: int)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                      input vertices:
                        1 Map 3
                      Statistics: Num rows: 8 Data size: 1528 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        null sort order: 
                        sort order: 
                        Statistics: Num rows: 8 Data size: 1528 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string), _col3 (type: int), _col4 (type: int), _col5 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: a
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
                  Filter Operator
                    predicate: value is not null (type: boolean)
                    Statistics: Num rows: 4 Data size: 384 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: key (type: int), value (type: int), col_1 (type: string)
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 4 Data size: 384 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col1 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col1 (type: int)
                        Statistics: Num rows: 4 Data size: 384 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                residual filter predicates: {((_col6 + _col0) >= 100)}
                Statistics: Num rows: 16 Data size: 4592 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string), _col6 (type: int), _col7 (type: int), _col8 (type: string), _col3 (type: int), _col4 (type: int), _col5 (type: string)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                  Statistics: Num rows: 16 Data size: 4592 Basic stats: COMPLETE Column stats: COMPLETE
                  Limit
                    Number of rows: 10
                    Statistics: Num rows: 10 Data size: 2870 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 10 Data size: 2870 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 10
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[24][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: SELECT *
FROM test2_n5
JOIN test1_n8 a ON (a.key+test2_n5.key >= 100)
LEFT OUTER JOIN test1_n8 b ON (b.value = test2_n5.value)
LIMIT 10
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n8
PREHOOK: Input: default@test2_n5
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test2_n5
JOIN test1_n8 a ON (a.key+test2_n5.key >= 100)
LEFT OUTER JOIN test1_n8 b ON (b.value = test2_n5.value)
LIMIT 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n8
POSTHOOK: Input: default@test2_n5
#### A masked pattern was here ####
103	2	Ema	100	1	Bob	99	2	Mat
103	2	Ema	99	0	Alice	99	2	Mat
103	2	Ema	101	2	Car	99	2	Mat
103	2	Ema	99	2	Mat	99	2	Mat
103	2	Ema	98	NULL	None	99	2	Mat
103	2	Ema	100	1	Bob	101	2	Car
103	2	Ema	99	0	Alice	101	2	Car
103	2	Ema	101	2	Car	101	2	Car
103	2	Ema	99	2	Mat	101	2	Car
103	2	Ema	98	NULL	None	101	2	Car
Warning: Shuffle Join MERGEJOIN[24][tables = [$hdt$_0, $hdt$_1, $hdt$_2]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: EXPLAIN
SELECT *
FROM test2_n5
LEFT OUTER JOIN test1_n8 a ON (a.value = test2_n5.value)
JOIN test1_n8 b ON (b.key+test2_n5.key<= 102)
LIMIT 10
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n8
PREHOOK: Input: default@test2_n5
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM test2_n5
LEFT OUTER JOIN test1_n8 a ON (a.value = test2_n5.value)
JOIN test1_n8 b ON (b.key+test2_n5.key<= 102)
LIMIT 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n8
POSTHOOK: Input: default@test2_n5
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 1 <- Map 3 (CUSTOM_EDGE)
        Reducer 2 <- Map 1 (XPROD_EDGE), Map 3 (XPROD_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test2_n5
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                    Map Join Operator
                      condition map:
                           Left Outer Join 0 to 1
                      keys:
                        0 _col1 (type: int)
                        1 _col1 (type: int)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                      input vertices:
                        1 Map 3
                      Statistics: Num rows: 8 Data size: 1528 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        null sort order: 
                        sort order: 
                        Statistics: Num rows: 8 Data size: 1528 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string), _col3 (type: int), _col4 (type: int), _col5 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: a
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: value is not null (type: boolean)
                    Statistics: Num rows: 4 Data size: 384 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: key (type: int), value (type: int), col_1 (type: string)
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 4 Data size: 384 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col1 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col1 (type: int)
                        Statistics: Num rows: 4 Data size: 384 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: int), _col2 (type: string)
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                residual filter predicates: {((_col6 + _col0) <= 102)}
                Statistics: Num rows: 16 Data size: 4592 Basic stats: COMPLETE Column stats: COMPLETE
                Limit
                  Number of rows: 10
                  Statistics: Num rows: 10 Data size: 2870 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 10 Data size: 2870 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 10
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[24][tables = [$hdt$_0, $hdt$_1, $hdt$_2]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: SELECT *
FROM test2_n5
LEFT OUTER JOIN test1_n8 a ON (a.value = test2_n5.value)
JOIN test1_n8 b ON (b.key+test2_n5.key<= 102)
LIMIT 10
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n8
PREHOOK: Input: default@test2_n5
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test2_n5
LEFT OUTER JOIN test1_n8 a ON (a.value = test2_n5.value)
JOIN test1_n8 b ON (b.key+test2_n5.key<= 102)
LIMIT 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n8
POSTHOOK: Input: default@test2_n5
#### A masked pattern was here ####
Warning: Shuffle Join MERGEJOIN[24][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: EXPLAIN
SELECT *
FROM test2_n5
JOIN test1_n8 a ON (a.key+test2_n5.key >= 100)
RIGHT OUTER JOIN test1_n8 b ON (b.value = test2_n5.value)
LIMIT 10
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n8
PREHOOK: Input: default@test2_n5
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM test2_n5
JOIN test1_n8 a ON (a.key+test2_n5.key >= 100)
RIGHT OUTER JOIN test1_n8 b ON (b.value = test2_n5.value)
LIMIT 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n8
POSTHOOK: Input: default@test2_n5
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 4 <- Reducer 2 (CUSTOM_EDGE)
        Reducer 2 <- Map 1 (XPROD_EDGE), Map 3 (XPROD_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test2_n5
                  filterExpr: value is not null (type: boolean)
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: value is not null (type: boolean)
                    Statistics: Num rows: 3 Data size: 285 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: key (type: int), value (type: int), col_2 (type: string)
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 3 Data size: 285 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        null sort order: 
                        sort order: 
                        Statistics: Num rows: 3 Data size: 285 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: a
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 4 
            Map Operator Tree:
                TableScan
                  alias: b
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Map Join Operator
                      condition map:
                           Right Outer Join 0 to 1
                      keys:
                        0 _col1 (type: int)
                        1 _col1 (type: int)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                      input vertices:
                        0 Reducer 2
                      Statistics: Num rows: 15 Data size: 3915 Basic stats: COMPLETE Column stats: COMPLETE
                      Limit
                        Number of rows: 10
                        Statistics: Num rows: 10 Data size: 2675 Basic stats: COMPLETE Column stats: COMPLETE
                        File Output Operator
                          compressed: false
                          Statistics: Num rows: 10 Data size: 2675 Basic stats: COMPLETE Column stats: COMPLETE
                          table:
                              input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                              output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                residual filter predicates: {((_col3 + _col0) >= 100)}
                Statistics: Num rows: 6 Data size: 1146 Basic stats: COMPLETE Column stats: COMPLETE
                Reduce Output Operator
                  key expressions: _col1 (type: int)
                  null sort order: z
                  sort order: +
                  Map-reduce partition columns: _col1 (type: int)
                  Statistics: Num rows: 6 Data size: 1146 Basic stats: COMPLETE Column stats: COMPLETE
                  value expressions: _col0 (type: int), _col2 (type: string), _col3 (type: int), _col4 (type: int), _col5 (type: string)

  Stage: Stage-0
    Fetch Operator
      limit: 10
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[24][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: SELECT *
FROM test2_n5
JOIN test1_n8 a ON (a.key+test2_n5.key >= 100)
RIGHT OUTER JOIN test1_n8 b ON (b.value = test2_n5.value)
LIMIT 10
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n8
PREHOOK: Input: default@test2_n5
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test2_n5
JOIN test1_n8 a ON (a.key+test2_n5.key >= 100)
RIGHT OUTER JOIN test1_n8 b ON (b.value = test2_n5.value)
LIMIT 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n8
POSTHOOK: Input: default@test2_n5
#### A masked pattern was here ####
NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	None
NULL	NULL	NULL	NULL	NULL	NULL	98	NULL	None
102	2	Del	98	NULL	None	99	2	Mat
103	2	Ema	100	1	Bob	99	2	Mat
103	2	Ema	99	0	Alice	99	2	Mat
103	2	Ema	101	2	Car	99	2	Mat
103	2	Ema	99	2	Mat	99	2	Mat
103	2	Ema	98	NULL	None	99	2	Mat
102	2	Del	100	1	Bob	99	2	Mat
102	2	Del	99	0	Alice	99	2	Mat
Warning: Shuffle Join MERGEJOIN[24][tables = [$hdt$_0, $hdt$_1, $hdt$_2]] in Stage 'Reducer 3' is a cross product
PREHOOK: query: EXPLAIN
SELECT *
FROM test2_n5
RIGHT OUTER JOIN test1_n8 a ON (a.value = test2_n5.value)
JOIN test1_n8 b ON (b.key+test2_n5.key<= 102)
LIMIT 10
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n8
PREHOOK: Input: default@test2_n5
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM test2_n5
RIGHT OUTER JOIN test1_n8 a ON (a.value = test2_n5.value)
JOIN test1_n8 b ON (b.key+test2_n5.key<= 102)
LIMIT 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n8
POSTHOOK: Input: default@test2_n5
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 2 <- Map 1 (CUSTOM_EDGE)
        Reducer 3 <- Map 2 (XPROD_EDGE), Map 4 (XPROD_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test2_n5
                  filterExpr: value is not null (type: boolean)
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: value is not null (type: boolean)
                    Statistics: Num rows: 3 Data size: 285 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: key (type: int), value (type: int), col_2 (type: string)
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 3 Data size: 285 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col1 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col1 (type: int)
                        Statistics: Num rows: 3 Data size: 285 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 2 
            Map Operator Tree:
                TableScan
                  alias: a
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Map Join Operator
                      condition map:
                           Right Outer Join 0 to 1
                      keys:
                        0 _col1 (type: int)
                        1 _col1 (type: int)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                      input vertices:
                        0 Map 1
                      Statistics: Num rows: 9 Data size: 1525 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        null sort order: 
                        sort order: 
                        Statistics: Num rows: 9 Data size: 1525 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string), _col3 (type: int), _col4 (type: int), _col5 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 4 
            Map Operator Tree:
                TableScan
                  alias: b
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                residual filter predicates: {((_col6 + _col0) <= 102)}
                Statistics: Num rows: 18 Data size: 5166 Basic stats: COMPLETE Column stats: COMPLETE
                Limit
                  Number of rows: 10
                  Statistics: Num rows: 10 Data size: 2870 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 10 Data size: 2870 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 10
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[24][tables = [$hdt$_0, $hdt$_1, $hdt$_2]] in Stage 'Reducer 3' is a cross product
PREHOOK: query: SELECT *
FROM test2_n5
RIGHT OUTER JOIN test1_n8 a ON (a.value = test2_n5.value)
JOIN test1_n8 b ON (b.key+test2_n5.key<= 102)
LIMIT 10
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n8
PREHOOK: Input: default@test2_n5
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test2_n5
RIGHT OUTER JOIN test1_n8 a ON (a.value = test2_n5.value)
JOIN test1_n8 b ON (b.key+test2_n5.key<= 102)
LIMIT 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n8
POSTHOOK: Input: default@test2_n5
#### A masked pattern was here ####
Warning: Shuffle Join MERGEJOIN[15][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: EXPLAIN
SELECT *
FROM test2_n5
JOIN test1_n8 a ON (a.key+test2_n5.key >= 100)
FULL OUTER JOIN test1_n8 b ON (b.value = test2_n5.value)
LIMIT 10
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n8
PREHOOK: Input: default@test2_n5
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM test2_n5
JOIN test1_n8 a ON (a.key+test2_n5.key >= 100)
FULL OUTER JOIN test1_n8 b ON (b.value = test2_n5.value)
LIMIT 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n8
POSTHOOK: Input: default@test2_n5
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (XPROD_EDGE), Map 4 (XPROD_EDGE)
        Reducer 3 <- Map 4 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test2_n5
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 4 
            Map Operator Tree:
                TableScan
                  alias: a
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
                    Reduce Output Operator
                      key expressions: _col1 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col1 (type: int)
                      Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                residual filter predicates: {((_col3 + _col0) >= 100)}
                Statistics: Num rows: 8 Data size: 1528 Basic stats: COMPLETE Column stats: COMPLETE
                Reduce Output Operator
                  key expressions: _col1 (type: int)
                  null sort order: z
                  sort order: +
                  Map-reduce partition columns: _col1 (type: int)
                  Statistics: Num rows: 8 Data size: 1528 Basic stats: COMPLETE Column stats: COMPLETE
                  value expressions: _col0 (type: int), _col2 (type: string), _col3 (type: int), _col4 (type: int), _col5 (type: string)
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Full Outer Join 0 to 1
                keys:
                  0 _col1 (type: int)
                  1 _col1 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                Statistics: Num rows: 23 Data size: 4863 Basic stats: COMPLETE Column stats: COMPLETE
                Limit
                  Number of rows: 10
                  Statistics: Num rows: 10 Data size: 2292 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 10 Data size: 2292 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 10
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[15][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: SELECT *
FROM test2_n5
JOIN test1_n8 a ON (a.key+test2_n5.key >= 100)
FULL OUTER JOIN test1_n8 b ON (b.value = test2_n5.value)
LIMIT 10
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n8
PREHOOK: Input: default@test2_n5
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test2_n5
JOIN test1_n8 a ON (a.key+test2_n5.key >= 100)
FULL OUTER JOIN test1_n8 b ON (b.value = test2_n5.value)
LIMIT 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n8
POSTHOOK: Input: default@test2_n5
#### A masked pattern was here ####
NULL	NULL	NULL	NULL	NULL	NULL	99	0	Alice
NULL	NULL	NULL	NULL	NULL	NULL	100	1	Bob
102	2	Del	100	1	Bob	99	2	Mat
102	2	Del	100	1	Bob	101	2	Car
102	2	Del	99	0	Alice	99	2	Mat
102	2	Del	99	0	Alice	101	2	Car
102	2	Del	101	2	Car	99	2	Mat
102	2	Del	101	2	Car	101	2	Car
102	2	Del	99	2	Mat	99	2	Mat
102	2	Del	99	2	Mat	101	2	Car
Warning: Shuffle Join MERGEJOIN[16][tables = [$hdt$_0, $hdt$_1, $hdt$_2]] in Stage 'Reducer 3' is a cross product
PREHOOK: query: EXPLAIN
SELECT *
FROM test2_n5
FULL OUTER JOIN test1_n8 a ON (a.value = test2_n5.value)
JOIN test1_n8 b ON (b.key+test2_n5.key<= 102)
LIMIT 10
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n8
PREHOOK: Input: default@test2_n5
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN
SELECT *
FROM test2_n5
FULL OUTER JOIN test1_n8 a ON (a.value = test2_n5.value)
JOIN test1_n8 b ON (b.key+test2_n5.key<= 102)
LIMIT 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n8
POSTHOOK: Input: default@test2_n5
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 4 (SIMPLE_EDGE)
        Reducer 3 <- Map 4 (XPROD_EDGE), Reducer 2 (XPROD_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test2_n5
                  Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_2 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col1 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col1 (type: int)
                      Statistics: Num rows: 4 Data size: 380 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Map 4 
            Map Operator Tree:
                TableScan
                  alias: a
                  Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: key (type: int), value (type: int), col_1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col1 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col1 (type: int)
                      Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col2 (type: string)
                    Reduce Output Operator
                      null sort order: 
                      sort order: 
                      Statistics: Num rows: 6 Data size: 572 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Full Outer Join 0 to 1
                keys:
                  0 _col1 (type: int)
                  1 _col1 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                Statistics: Num rows: 13 Data size: 1707 Basic stats: COMPLETE Column stats: COMPLETE
                Reduce Output Operator
                  null sort order: 
                  sort order: 
                  Statistics: Num rows: 13 Data size: 1707 Basic stats: COMPLETE Column stats: COMPLETE
                  value expressions: _col0 (type: int), _col1 (type: int), _col2 (type: string), _col3 (type: int), _col4 (type: int), _col5 (type: string)
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 
                  1 
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                residual filter predicates: {((_col6 + _col0) <= 102)}
                Statistics: Num rows: 26 Data size: 7271 Basic stats: COMPLETE Column stats: COMPLETE
                Limit
                  Number of rows: 10
                  Statistics: Num rows: 10 Data size: 2870 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 10 Data size: 2870 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 10
      Processor Tree:
        ListSink

Warning: Shuffle Join MERGEJOIN[16][tables = [$hdt$_0, $hdt$_1, $hdt$_2]] in Stage 'Reducer 3' is a cross product
PREHOOK: query: SELECT *
FROM test2_n5
FULL OUTER JOIN test1_n8 a ON (a.value = test2_n5.value)
JOIN test1_n8 b ON (b.key+test2_n5.key<= 102)
LIMIT 10
PREHOOK: type: QUERY
PREHOOK: Input: default@test1_n8
PREHOOK: Input: default@test2_n5
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test2_n5
FULL OUTER JOIN test1_n8 a ON (a.value = test2_n5.value)
JOIN test1_n8 b ON (b.key+test2_n5.key<= 102)
LIMIT 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1_n8
POSTHOOK: Input: default@test2_n5
#### A masked pattern was here ####
